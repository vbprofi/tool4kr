using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Diagnostics;
using System.Threading;
using System.Data.SQLite;
using System.Data.Entity;
using DBTest.util;
using System.Transactions;
using autogeneratedDB;

namespace DBTest
{
    class Program
    {
        public static String assemblyDirectory = Environment.CurrentDirectory.ToString(); //ermittelt den aktuellen pfad der Anwendung
        public static String dbdateiname = assemblyDirectory + @"\test.db"; //Dateiname der SQLite-Datenbank
        private static String dlldateiname = assemblyDirectory + @"\dlls.txt"; //Datei für schreiben der DLL-Infos

        static void Main(string[] args)
        {
            //Titel der Console
            getAssembly("title");
            //Signale ausgeben beim Starten
            Console.Beep(900, 100); Console.Beep(500, 100);

            //Inhalt der Console mit Infos füllen
            getAssembly();
            //DLL-Dateiinfos in Datei schreiben
            writeLoadDLL();
            //Datenbank erzeugen, falls nicht vorhanden
            Database.SetInitializer(new DBContextInitializer());
            //Datenbankobjekt erzeugen
            DatabaseContext context = new DatabaseContext();
            context.Configuration.AutoDetectChangesEnabled = false;
            context.Configuration.LazyLoadingEnabled = false;
            context.Configuration.ValidateOnSaveEnabled = false;
            context.Configuration.UseDatabaseNullSemantics = false;
            context.Configuration.ProxyCreationEnabled = false;
            context.Configuration.EnsureTransactionsForFunctionsAndCommands = false;
            context.SaveChanges();
            Console.WriteLine("Datenbankversion: " + context.Database.Connection.ServerVersion);

            createSampleDataAllTables(context); //keine Änderung
            createSampleDataAllTables(context); //schneller geworden.
                                                //merke mit eingebautem Transactions keinen unterschied beim ersten Füllen. Beim zweiten gibts einen kleinen unterschied. kA, woran das liegt. (siehe funktion)
                                                //performance: https://codingsight.com/entity-framework-improving-performance-when-saving-data-to-database/

            printTableData(context);

            //Beenden
            Console.Write("\nBitte return drücken, um die Anwendung zu beenden."); Console.ReadLine();
            //Signale ausgeben beim beenden
            Console.Beep(500, 200); Console.Beep(900, 200);
        }//end main function

        /**
         * Test-Methode: Fügt zu allen Tabellen einen Datensatz hinzu und misst die Schreibzeit.
         */
        private static void createSampleDataAllTables(DatabaseContext context)
        {
            using (var dbContextTransaction = context.Database.BeginTransaction())
            {
                //Stopuhr zur Zeit Messung erzeugen
                CounterStopWatch watch = new CounterStopWatch();
                watch.ResetAndStart(); //Stopuhr zurücksetzen auf 0 und starten

                Kunden kunde = DBRecordFactory.createKunden("Firma", "Vorname", "Nachname", "Straße", "HausNR", 12345, "Ort", "Postfach", "Land", "Telefon", "Fax", "EMail"); //Tabelle Kunden füllen
                                                                                                                                                           //context.kunden.Include("b.bemerkung_id"); //Foreign-Key hinzufügen
                context.kunden.Add(kunde); //Inhalte zur Tabelle hinzufügen
                watch++;

                Ausgabe ag = DBRecordFactory.createAusgabe(199, Convert.ToDecimal("3,00")); //Tabelle ausgabe füllen
                context.Ausgabe.Add(ag); //Inhalte zur Tabelle hinzufügen
                watch++;

                Rechnung rn = DBRecordFactory.createRechnung("Firma", "Vorname", "Nachname", "Straße", "HausNR", 12345, "Ort", "Postfach", "Land", "Telefon", "Fax", "EMail", 0, 0); //Tabelle rechnung füllen
                context.Rechnung.Add(rn); //Inhalte zur Tabelle hinzufügen
                watch++;

                Abo ab = DBRecordFactory.createAbo(1, 1, 1, 1, 1, 1); //Tabelle abo füllen
                context.Abo.Add(ab); //{mit foreign key} Inhalte zur Tabelle hinzufügen
                watch++;

                Bemerkung bm = DBRecordFactory.createBemerkung("Txt", 1); //Tabelle bemerkung füllen
                                                       //context.Bemerkung.Include("kunden_id"); //Foreign-Key hinzufügen
                context.Bemerkung.Add(bm); //{mit foreign key} Inhalte zur Tabelle hinzufügen
                watch++;

                Rechnungsposten rp = DBRecordFactory.createRechnungsposten(1, 1, 6, 1, 555555, 888888, "IBAN", "Institut", "KontoInhaber", 1); //Tabelle rechnungsposten füllen
                context.Rechnungsposten.Add(rp); //{mit foreign key} Inhalte zur Tabelle hinzufügen
                watch++;

                Status state = DBRecordFactory.createStatus(1, 1, 1, 1); //Tabelle status füllen
                context.Status.Add(state); //{mit foreign key} Inhalte zur Tabelle hinzufügen
                watch++;

                //SQLite-db füllen
                context.SaveChanges(); //alle Änderungen in der DB-Datei speichern
                //context.ChangeTracker.DetectChanges(); //Änderungen speichern
//                context.SaveChanges();
                watch.Stop(); //Zeit anhalten
                Console.WriteLine("Schreibzeit: " + watch); //Ausgeben wie lange das Schreiben in die DB gedauert hat        	
                dbContextTransaction.Commit();
            }
        }

        /**
         * Test-Methode: Gibt alle Tabellen aus und misst die Lesezeit.
         */
        private static void printTableData(DatabaseContext context)
        {
            using (var dbContextTransaction = context.Database.BeginTransaction())
            {
                //Stopuhr zur Zeit Messung erzeugen
                CounterStopWatch watch = new CounterStopWatch();
                watch.ResetAndStart(); //Stopuhr zurücksetzen auf 0 und starten

                /*
                 * Ausgabe der DB-Inhalte in der console
                 */
                Console.WriteLine("\n=< Kunden >============================"); //Überschrift
                getKunden(context.kunden.ToList()); //Tabelle ausgeben
                watch++;

                Console.WriteLine("=< Rechnung >============================"); //Überschrift
                getRechnung(context.Rechnung.ToList()); //Tabelle ausgeben
                watch++;

                Console.WriteLine("=< Bemerkung >============================"); //Überschrift
                getBemerkung(context.Bemerkung.ToList()); //Tabelle ausgeben
                watch++;

                Console.WriteLine("=< Status >============================"); //Überschrift
                getStatus(context.Status.ToList()); //Tabelle ausgeben
                watch++;

                Console.WriteLine("=< Ausgabe >============================"); //Überschrift
                getAusgabe(context.Ausgabe.ToList()); //Tabelle ausgeben
                watch++;

                Console.WriteLine("=< Abo >============================"); //Überschrift
                getAbo(context.Abo.ToList()); //Tabelle ausgeben
                watch++;

                Console.WriteLine("=< Rechnungsposten >============================"); //Überschrift
                getRechnungsposten(context.Rechnungsposten.ToList()); //Tabelle ausgeben
                watch++;

                watch.Stop(); //Zeit anhalten
                Console.WriteLine("\nLesezeit: " + watch); //Ausgeben wie lange das Lesen aus der DB gedauert hat
                dbContextTransaction.Commit();
            }
        }

        private static void getAssembly(String info = "")
        {
            Assembly execAssembly = Assembly.GetCallingAssembly();
            AssemblyName name = execAssembly.GetName();

            if (info.Length <= 0 || info == "")
            {
                Console.WriteLine(string.Format("{0}{1} v{2:0} for .Net ({3}){0}",
                Environment.NewLine,
                name.Name,
                name.Version.ToString(),
                execAssembly.ImageRuntimeVersion
                ));
            }
            else
            if (info == "title") Console.Title = name.Name + " v" + name.Version.ToString();
        }

        private static String getBINinfo(string AppDirectory)
        {
                        String wText = "";
            try
            {
                var versionInfo = FileVersionInfo.GetVersionInfo(AppDirectory);
                                
                wText += "Productname: " + versionInfo.ProductName + Environment.NewLine;
                wText += "ProductVersion: " + versionInfo.ProductVersion+ Environment.NewLine;
                wText += "FileVersion: " + versionInfo.FileVersion + Environment.NewLine;
                return wText;
            }
            catch { return wText; }
            return wText;
        }

        //geladene DLL-Infos in Textdatei schreiben
        private static void writeLoadDLL()
{
            String wText = "";
            try
                {
RWFile wFile = new RWFile();
wText += DateTime.Now + ": Programm gestartet." + Environment.NewLine + "Folgende DLL-Dateien geladen..."+ Environment.NewLine + "----------------------" + Environment.NewLine;
                //dateien info
                wText += getBINinfo(assemblyDirectory + @"\autogeneratedDB.dll") + Environment.NewLine;
           wText += getBINinfo(assemblyDirectory + @"\System.Data.SQLite.dll") + Environment.NewLine;
          wText +=  getBINinfo(assemblyDirectory + @"\EntityFramework.dll")+ Environment.NewLine;
                       wText += getBINinfo(assemblyDirectory + @"\System.Data.SQLite.EF6.dll") + Environment.NewLine;
                
wFile.WriteFile(dlldateiname, wText);
                } catch { }
}

        /********
        * Funktion zur Ausgabe
        */
        private static void getKunden(List<DBTest.Kunden> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.firma + " " + item.vorname + " " + item.nachname + " " + item.straße + " " + item.hausnr + " " + item.plz + " " + item.postfach + " " + item.land + " " + item.telefon + " " + item.fax + " " + item.email + " " + item.bemerkung_id + " " + " " + Utils.TimeStampToDateTime(item.erstellt_am));
                Console.WriteLine();
            }
        }

        private static void getRechnung(List<DBTest.Rechnung> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.kunden_id + " " + item.firma + " " + item.vorname + " " + item.nachname + " " + item.straße + " " + item.hausnr + " " + item.plz + " " + item.postfach + " " + item.land + " " + item.telefon + " " + item.fax + " " + item.email + " " + Utils.TimeStampToDateTime(item.erstellt_am));
                Console.WriteLine();
            }
        }

        private static void getBemerkung(List<DBTest.Bemerkung> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.kunden_id + "#" + " " + item.text + " " + Utils.TimeStampToDateTime(item.datum));
                Console.WriteLine();
            }
        }

        private static void getStatus(List<DBTest.Status> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.kunden_id + "#" + item.kunden.status_id + " " + item.flag + " " + Utils.TimeStampToDateTime(item.eintritt_am) + " " + Utils.TimeStampToDateTime(item.austritt_am));
                Console.WriteLine();
            }
        }

        private static void getAusgabe(List<DBTest.Ausgabe> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.ausgabe + " " + item.preis + "EURO " + Utils.TimeStampToDateTime(item.datum));
                Console.WriteLine();
            }
        }

        private static void getAbo(List<DBTest.Abo> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.ausgabe_bis + " " + item.ausgabe_von + " " + Utils.TimeStampToDateTime(item.bezahlt_am) + " " + item.bemerkung_id);
                Console.WriteLine();
            }
        }

        private static void getRechnungsposten(List<DBTest.Rechnungsposten> data)
        {
            foreach (var item in data)
            {
                Console.Write(item.id + " " + item.abo_id + " " + item.anzahl + " " + Utils.TimeStampToDateTime(item.erstellt_am) + " " + item.bemerkung_id + " " + item.kunden_id + " " + item.kontoinhaber + " " + item.institut + " " + item.kontonr);
                Console.WriteLine();
            }
        }
    }//end class
} //end namespace
